type Author {
    id: ID!
    firstName: String
    lastName: String
}

type Book {
    id: ID!
    name: String
    isbn: String
    authorId: String!
}

type Member {
    id: ID!
    firstName: String
    lastName: String
    memberStatus: MemberStatus!
}

enum MemberStatus {
    ACTIVE
    DEACTIVATED
}

type Lend {
    id: ID!
    startOn: String
    status: LendStatus!
    dueOn: String
    bookId: String!
    memberId: String!
}

enum LendStatus {
    AVAILABLE
    BORROWED
}


type Query {
    authors: [Author]
    author(id: ID): Author
    books: [Book]
    book: Book
    members: [Member]
    member: Member
}

type Mutation {
    createAuthor(input: AuthorInput): Author
    updateAuthor(id: ID!, input: AuthorInput): Author
    deleteAuthor(id: ID!): Author
}

input AuthorInput {
    firstName: String
    lastName: String
}